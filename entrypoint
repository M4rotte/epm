#!/bin/sh

SELF="$(readlink -f ${0})"
CONFIG="${SELF}.cfg"
source "$CONFIG"

echo " * IP:            $(hostname -i)"
echo " * Configuration: ${CONFIG}"
grep -Ev '^$|^#' "${CONFIG}" |sed -e 's/^/    - /'
echo " * Processes:"
ps -o ppid,pid,user,group,args |tail -n +2

function trim { echo -e "$1" | tr -d '[:space:]'; }

function ptable { ps -o ppid,pid,user,group,etime,time,comm,stat,args |tail -n +2; }

function is_running {
   # is_running(service)
   sv_args=$(get_value StartCmd $1)
   ptable | grep -Eq '^.* '"$sv_args"'$'
}

function get_pid {
    # get_pid(service_args)
    ptable | grep -E '^.* '"$1"'$' |awk '{print $2}'

}

function get_value {
    # get_value(key, service)
    echo $(grep '^'"$1"' ' "${SERVICE_DIRECTORY}/$2.conf" | awk '{sub($1 FS,"")}1')
}

function get_stop_cmd {
    # get_stop_cmd(service)
    stop_cmd=$(get_value StopCmd $1)
    start_cmd=$(get_value StartCmd $1)
    [ -z "$stop_cmd" ] && stop_cmd='kill -15 '$(get_pid "$start_cmd")
    echo "$stop_cmd"
}

function get_name {
    # get_name(service)
    echo $(basename $1) | sed -e 's/\'"${SERVICE_FILE_EXTENSION}"'$//'
}


function check {

    for service in ${SERVICE_DIRECTORY}/*.conf; do
        sv_name=$(get_name $service)
        desired_state=$(trim "$(get_value DesiredState $sv_name)")
	    echo "Checking $sv_name: DesiredState=$desired_state"
            if is_running $sv_name
            then echo " * Service $sv_name is running."
                 case $desired_state in
                     stopped)
                         echo "Stopping service $sv_name"
                         get_stop_cmd $sv_name
                         eval $(get_stop_cmd $sv_name)
                     ;;
                     *)
                 esac
            else echo " * Service $sv_name is stopped."
                 case $desired_state in
                     running)
                         echo "Restarting service $sv_name"
                         eval $(get_value StartCmd $sv_name) &
                     ;;
                     *)
                 esac
            fi
        done
        
        sleep ${PROCESS_CHECK_PERIOD}
}

eval $(get_value StartCmd foo) &
eval $(get_value StartCmd bar) &
eval $(get_value StartCmd baz) &

while true; do check "${SELF}"; done


