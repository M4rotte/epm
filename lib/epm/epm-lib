#!/bin/sh
# /lib/epm/epm-lib

timestamp()       { printf `date -Is` >> "$EPM_LOG" && echo -n ' ' >> "$EPM_LOG"; }
write_log()       { timestamp; echo -e "$1" >> "$EPM_LOG"; }
graceful_exit()   { echo " EPM exiting… Bye!"; exit 0; }
restart()         { exec "$EPM_SELF" "$EPM_CONF"; }

dice() {
    # dice(val,max)
    # Get a random number between 1 and 'max', return true if 'val' is strictly superior or equal.
    [ $(shuf -i0-$2 -n1) -le $1 ]
}

check_env() {
    # Check if we got all we need. Exit on error if not.
    for prg in dc grep awk touch printf shuf which; do
        [ -x "$(which $prg)" ] || { echo "$prg not found, exiting. (\$PATH is $PATH)"; exit 30; }
    done
}

ensure_ssh_host_keys() {
    for type in rsa dsa ecdsa ed25519; do
        [ -f /etc/ssh/ssh_host_${type}_key ] || ssh-keygen -t "$type" -N '' -f /etc/ssh/ssh_host_${type}_key 1>/dev/null
    done
    write_log "SSH host keys generated."
}

wake_up() {
    {
        check_env &&\
        mkdir -p "$EPM_DB_DIR" "$EPM_LOG_DIR" "$EPM_RUN_DIR" &&\
        touch "$EPM_DB" "$EPM_LOG" &&\
        ([ "$EPM_ENSURE_SSH_KEYS" = 'yes' ] && ensure_ssh_host_keys) &&\
        ps_store_current_info $$ _self &&\
        ps_store_current_info 1  _init
    } \
    || { write_log "Error during EPM awakening. Exiting…"; exit 31; }
    
}

truncate_files() {
    # truncate_files(directory)
    tmp_file=/tmp/epm-$RANDOM-$$
    for file in $@; do
        tail -n $EPM_RUN_PID_MAXLINE "$file" > $tmp_file
        mv $tmp_file "$file"
    done
}

dispatch() {
    dice 1 10 && db_clean # Get rid of non-uniq entries. Randomly but roughly each 1/10 run…
                         # TODO: write a function that works like anacron
    ps_store_current_info $$ _self
    ps_store_current_info 1 _init
    for entry in ${EPM_SERVICES_DIR}/*${EPM_SERVICEFILE_EXT}; do
        tmp=${entry##*/}; service=${tmp%\.*}
        cmd_to_run="$(sv_prescription "$service" "$(ps_get_last_info "$service")" "$(sv_get_desired_state "$service")")"
        [ -n "$cmd_to_run" ] && {
            write_log "Running \`$cmd_to_run\` in the background"
            $cmd_to_run &
            leader=$!
            echo Leader is $leader
            related="$(pgrep -P $leader)"
            [ -z $related ] && related="$(pgrep -s $leader)"
            echo Related:
            echo $related
            echo Processes:
            ps -e -o pid,ppid,pgid,user,group,time,etime,comm,stat,args
            ps_store_current_info $leader "$service"
            args_store_current_info "$cmd_to_run" "$service"
            for process in $(pgrep -P $leader); do
                ps_store_current_info $process "$service"
            done
        }
    done    
}

run() {
    cat "$EPM_DB"
    run_start=$(date +%s)
    write_log "Starting run #${EPM_RUN_COUNTER}…"
    
    dispatch
    
    run_elapsed=$(echo "$(date +%s) $run_start - p" | dc )
    left_to_sleep=$(echo "$EPM_RUN_DELAY $run_elapsed - p" | dc)
    EPM_RUN_COUNTER=$(( $EPM_RUN_COUNTER + 1 ))
    [ $left_to_sleep -ge 0 ] && {
        write_log "Sleeping $left_to_sleep seconds…"
        sleep $left_to_sleep
    }
}



