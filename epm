#!/bin/sh

SELF="$(readlink -f ${0})"
CONFIG="/etc/epm/epm.cfg"

init_db() {
    sv_database_file=$(basename "${SERVICE_DATABASE}")
    sv_database_directory=$(dirname "${SERVICE_DATABASE}")
    [ -d "$sv_database_directory" ] || { echo "Creating directory '$sv_database_directory'" && mkdir -p "$sv_database_directory" ; }
    [ -f "sv_database_file" ] || { echo "Creating database '$sv_database_file'" && ptable > "${SERVICE_DATABASE}"; }
}

ptable() { ps -o ppid,pid,user,group,etime,time,comm,stat,args |tail -n +2; }

is_running() {
   # is_running(service)
   sv_args=$(get_value StartCmd $1)
   [ -z "$sv_args" -o "$sv_args" = "$1" ] && sv_args="$(which $1)"
   ptable | grep -Eq '^.* '"$sv_args"'$'
}

get_pid() {
    # get_pid(service_args)
    ptable | grep -E '^.* '"$1"'$' |awk '{print $2}'

}

get_value() {
    # get_value(key, service)
    echo "$2: $1: '"$(grep '^'"$1"' ' "${SERVICE_DIRECTORY}/$2.conf" | awk '{sub($1 FS,"")}1')"'" >> /tmp/xxx
    try=$(echo $(grep '^'"$1"' ' "${SERVICE_DIRECTORY}/$2.conf" | awk '{sub($1 FS,"")}1'))
    if [ -n "$try" ]; then echo "$try"; else echo "$2"; fi
}

get_stop_cmd() {
    # get_stop_cmd(service)
    stop_cmd="$(get_value StopCmd $1)"
    start_cmd="$(get_value StartCmd $1)"
    [ -z "$stop_cmd" -o "$stop_cmd" = "$1" ] && stop_cmd='kill -15 '$(get_pid "$start_cmd")
    echo "GET STOP CMD: $start_cmd" >> /tmp/xxx
    echo "$stop_cmd"
}

get_start_cmd() {
    # get_start_cmd(service)
    start_cmd="$(get_value StartCmd $1)"
    [ -z "$start_cmd" -o "$start_cmd" = "$1" ] && start_cmd='exec $(which '"$1"')'
    echo "GET START CMD: $start_cmd" >> /tmp/xxx
    echo "$start_cmd"
}

get_name() {
    # get_name(service)
    echo $(basename $1) | sed -e 's/\'"${SERVICE_FILE_EXTENSION}"'$//'
}

check() {

    total_sv=0
    ok_sv=0
    
    for service in ${SERVICE_DIRECTORY}/*.conf; do
        total_sv=$(($total_sv + 1))
        sv_name=$(get_name $service)
        desired_state="$(get_value DesiredState $sv_name)"
        [ -z "$desired_state" -o "$desired_state" = "$sv_name" ] && desired_state="$PROCESS_DEFAULT_STATE"
	    echo "Checking $sv_name: DesiredState=$desired_state"
            if is_running $sv_name
            then echo " * Service $sv_name is running."
                 case $desired_state in
                     'stopped')
                         stop_cmd="$(get_stop_cmd $sv_name)"
                         echo "Stopping service $sv_name with \`$stop_cmd\`"
                         eval $stop_cmd &
                     ;;
                     'running')
                         ok_sv=$(($ok_sv + 1))
                     ;;
                 esac
            else echo " * Service $sv_name is stopped."
                 case $desired_state in
                     'running')
                         start_cmd="$(get_start_cmd $sv_name)"
                         echo "Restarting service $sv_name with \`$start_cmd\`"
                         eval $start_cmd &
                     ;;
                     'stopped')
                         ok_sv=$(($ok_sv + 1))
                     ;;
                 esac
            fi
        done
        echo
        if [ $ok_sv -lt $total_sv ]
            then echo "⇨ WARNING: $ok_sv/$total_sv services OK"
            else echo "⇨ All services OK ($ok_sv/$total_sv)"
        fi
        echo && sleep ${PROCESS_CHECK_PERIOD}
}

start() {
    # start(service)
    eval $(get_start_cmd $1) &
}

generate_host_keys_if_not_exist() {
    [ -f /etc/ssh/ssh_host_dsa_key ]     || { echo "Generating DSA host key…"     && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa 1>/dev/null; }
    [ -f /etc/ssh/ssh_host_rsa_key ]     || { echo "Generating RSA host key…"     && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa 1>/dev/null; }
    [ -f /etc/ssh/ssh_host_ecdsa_key ]   || { echo "Generating ECDSA host key…"   && ssh-keygen -f /etc/ssh/ssh_host_ecdsa_key -N '' -t rsa 1>/dev/null; }
    [ -f /etc/ssh/ssh_host_ed25519_key ] || { echo "Generating ED25519 host key…" && ssh-keygen -f /etc/ssh/ssh_host_ed25519_key -N '' -t rsa 1>/dev/null; }
}

show_host_keys() {
    ssh-keygen -y -l -f /etc/ssh/ssh_host_rsa_key
    ssh-keygen -y -l -f /etc/ssh/ssh_host_dsa_key
    ssh-keygen -y -l -f /etc/ssh/ssh_host_ecdsa_key
    ssh-keygen -y -l -f /etc/ssh/ssh_host_ed25519_key
}

show_setup() {
    echo -e "\n * IP:            $(hostname -i)"
    echo -e "\n * Configuration: ${CONFIG}\n"
    grep -Ev '^$|^#' "${CONFIG}" |sed -e 's/^/    - /'
    echo -e "\n * Host keys:\n"
    show_host_keys
    echo -e "\n * Processes:\n"
    ptable
    echo
}

source "$CONFIG"

generate_host_keys_if_not_exist

start foo
start baz
#~ start bar

show_setup


while true; do check "${SELF}"; done


